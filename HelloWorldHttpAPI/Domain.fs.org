#+Title: Domain Analysis for My Application

This is an app for organizing my workout routine. The end goal is to
have a mobile app that:

- Keeps track of my exercises (# reps, sets, ...)
- Predicts what exercise I will do next based on known policies
- Allows me to store videos and pictures

* App.Types

#+begin_src fsharp :tangle "Domain.fs"
namespace App.Types

open System
#+end_src

** Errors

Below are listed all possible application errors. This list is
expected to grow a lot as the app evolves.

#+begin_src fsharp :tangle "Domain.fs"
module Errors =
    type AuthError =
        | InvalidCredentials
        | NotAuthorized

    type DetailedDomainParsingError = {
        Field: string
        Value: string
        Comment: string option
    }

    type DomainParsingError =
        | DetailedDomainParsingError of DetailedDomainParsingError
        | SimpleError of string

    type AppError =
        | AuthError of AuthError
        | UserAlreadyExists
        | RoutineAlreadyExists
        | RoutineNotFound
        | UserNotFound
        | DomainParsingError of DomainParsingError list
#+end_src

All functions that can produce errors are expected to return the
following type.

** Global

#+begin_src fsharp :tangle "Domain.fs"
module Global =
    open Errors

    type AppResponse<'T> = Async<Result<'T, AppError>>
#+end_src

With this approach, we can make uniform use for ~asyncresult~ around
the code base. That is: given that all methods produce errors
constrained to ~AppError~, we can uniformly bind results with ~let!~
within and ~asyncresult~ CE.

** Domain

#+begin_src fsharp :tangle "Domain.fs"
module Domain =
#+end_src

*** Primitive Definitions

#+begin_src fsharp :tangle "Domain.fs"

    module Primitives =

        open Errors

        type Email =
            | Email of string
            static member ofPrimitive =
                function
                    | null | "" -> Error (SimpleError "Email cannot be empty")
                    | s -> Ok (Email s)
            member this.toPrimitive () =
                match this with | Email s -> s
            member this.toString () =
                match this with | Email s -> sprintf "Email: %s" s

        type PersonName =
            | PersonName of string
            static member ofPrimitive =
                function
                    | null | "" -> Error (SimpleError "Person name cannot be empty")
                    | s -> Ok (PersonName s)
            member this.toPrimitive () =
                match this with | PersonName s -> s
            member this.toString () =
                match this with | PersonName s -> sprintf "PersonName: %s" s
#+end_src
*** App User

Before accessing the app, a user must be logged in.

On this project I will play with an identify provider such as Active
Directory. The fact that a user has to authenticate is to be
abstracted away, and the app should support multiple mechanisms for
authentication (e.g.: gmail, github, ...).

#+begin_src fsharp :tangle "Domain.fs"
    module AppUser =

        open Primitives

        type AppUser = {
            Email: Email
            FirstName: PersonName
            LastName: PersonName
            BirthDate: DateTime
        }
#+end_src
*** App Configuration

This section describes app configurations which are local to the user.

#+begin_src fsharp :tangle "Domain.fs"
    module AppConfig =
        type ThemePreference =
            | White
            | Dark
        type WeightUnit = | Kilogram | Pound
        type Timezone = | Timezone // TODO

        type UserAppConfig =
            { ThemePreference: ThemePreference
              WeightUnitPreference: WeightUnit
              Timezone: Timezone }
            static member defaultValue =
                { ThemePreference = White
                  WeightUnitPreference = Kilogram
                  Timezone = Timezone }

#+end_src

*** Workout

This is an app for workout routines. The key concepts are presented
below.

- Exercise :: A movement pattern which is to be performed gym
  goers. Example: the dead-lift.
- Exercise Set :: A given number of repetitions of an exercise. E.g.:
  10 reps of a dead-lift at 80Kg
- Exercise Setup :: The number of sets and reps to be performed of an
  exercise.
- Workout Session :: A plan of the exercises and sets to be performed
  at a given day at the gym.
- Workout Plan :: A plan that is to be followed by a gym goer, day to
  day.

#+begin_src fsharp :tangle "Domain.fs"
    module Workout =
        open System

        type RepCount = int

        type ExerciseWeightLevel =
            | OneRM
            | ThreeRM
            | FiveRM
            | EightRM

        type WeightValue =
            | Kilogram of double
            | Pounds of double

        type ExerciseName = | ExerciseName of string

        type Exercise = {
            Name: ExerciseName
            Description: string
            VideoTutorial: string option
        }

        type Comment = | Comment of string

        type VideoFormat =
            | Mp4

        type ImageFormat =
            | PNG
            | Bitmap

        type Picture = {
            Format: ImageFormat
            RawContent: byte array
            Resolution: int * int
            FileName: string
            Thumbnail: Picture option
        }

        type Video = {
            Format: VideoFormat
            RawContent: byte array
            FileName: string
            Duration: double
            Thumbnail: Picture option
        }

        type Attachment =
            | Comment of Comment
            | Video of Video
            | Picture of Picture

        type ExerciseSetState =
            | NotTried
            | Completed
            | Failed of Comment option

        type ExerciseSet = {
            Reps: RepCount
            TargetWeight: WeightValue
            WeightLevel: ExerciseWeightLevel
            Status: ExerciseSetState
            Attachments: Attachment list
        }

        // Example: 3 sets: 5 reps of 5RM, 4 reps of 3RM, 1 rep of 1RM
        type ExerciseSetup = {
            Exercise: Exercise
            Sets: ExerciseSet list
            Comment: Comment option
        }

        // The workout to be done on a given day
        type WorkoutSession = {
            Routine: ExerciseSetup list
            DateTime: DateTime
            Comment: Comment option
        }

        type UserWorkoutHistory = WorkoutSession list

        type WorkoutSplit =
            | PushPull
            | Custom of Exercise list list

        type Cycle =
            | Weekly of int // number of day a week
            | RoundRobin of int // number of days in cycle

        type ExercisePolicy =
            | ThreeOfFive
            | FiveThreeOneSingleSetCycle
            | ThreeOfEight
            | Custom of (ExerciseWeightLevel * RepCount) list

        type WorkoutPlan = {
            CycleType: Cycle
            Exercises: (Exercise * ExercisePolicy) list
        }
#+end_src

** Application Data

#+begin_src fsharp :tangle "Domain.fs"
module AppData =
    open Domain.Primitives
    open Domain.Workout
    open Domain.AppUser
    open Domain.AppConfig

    type UserAppData =
        { WorkoutSessions: WorkoutSession list
          ActiveWorkoutSession: WorkoutSession option
          WorkoutPlans: WorkoutPlan list
          ActiveWorkoutPlan: WorkoutPlan option
          BodyweightHistory: (DateTime * WeightValue) list
          ExerciseDatabase: Exercise list }
          static member empty =
              { WorkoutSessions = List.empty
                ActiveWorkoutSession = None
                WorkoutPlans = List.empty
                ActiveWorkoutPlan = None
                BodyweightHistory = List.empty
                ExerciseDatabase = List.empty }


    type AppData =
        { UserData: Map<Email, (AppUser * UserAppData * UserAppConfig)>
          SystemData: Map<ExerciseName, Exercise> }
          static member empty =
              { UserData = Map.empty
                SystemData = Map.empty }
#+end_src
