#+Title: Domain Analysis for My Application

This is an app for organizing my workout routine. The end goal is to
have a mobile app that:

- Keeps track of my exercises (# reps, sets, ...)
- Predicts what exercise I will do next based on known policies

* Module Declaration

#+begin_src fsharp :tangle "Domain.fs"
module HelloWorldHttpAPI.Domain

open System
#+end_src

* App Errors

Below are listed all possible application errors.

#+begin_src fsharp :tangle "Domain.fs"
type AuthError =
    | InvalidCredentials
    | NotAuthorized

type AppError =
    | AuthError of AuthError
    | UserAlreadyExists
    | RoutineAlreadyExists
    | RoutineNotFound
    | UserNotFound
#+end_src

On this design, all functions that can produce errors are expected to
return the following type.

#+begin_src fsharp :tangle "Domain.fs"
type AppResponse<'T> = Async<Result<'T, AppError>>
#+end_src

With this approach, we can make uniform use for ~asyncresult~ around
the code base. That is: given that all methods produce errors
constrained to ~AppError~, we can uniformly bind results with ~let!~
within and ~asyncresult~ CE.

* User

Before accessing the app, a user must be logged in.

On this project I will play with an identify provider such as Active
Directory. The fact that a user has to authenticate is to be
abstracted away, and the app should support multiple mechanisms for
authentication (e.g.: gmail, github, ...).

#+begin_src fsharp :tangle "Domain.fs"

module AppUser =

    type Email = string
    type PersonName = string
    type ThemePreference =
        | White
        | Dark
    type WeightUnit = | Kilogram | Pound

    type AppUser = {
        FirstName: PersonName
        LastName: PersonName
        Email: Email // Primary Key
        CreatedAt: DateTime
        Birthdate: DateTime
        ThemePreference: ThemePreference
        WeightUnitPreference: WeightUnit
    }

    type Session = {
        UserEmail: Email
        LoggedAt: DateTime
        TimeToLive: TimeSpan
    }
#+end_src

* Workout Routine

This is an app for workout routines. A workout is a sequence of
exercises. Each exercise has a name, a number of sets and reps.

#+begin_src fsharp :tangle "Domain.fs"
module Workout =
    open System

    type RepCount = int

    type ExerciseWeightLevel =
        | OneRM
        | ThreeRM
        | FiveRM
        | EightRM

    type WeightValue =
        | Kilogram of double
        | Pounds of double

    type Exercise = {
        Name: string
        Description: string
        VideoTutorial: string option
    }

    type AppExerciseDatabase = Exercise list

    type Comment = string
    type Video = string // TODO
    type Picture = string // TODO

    type Attachment =
        | Comment of Comment
        | Video of Video
        | Picture of Picture

    type ExerciseSetState =
        | NotTried
        | Completed
        | Failed of Comment option

    type ExerciseSet = {
        Reps: RepCount
        TargetWeight: WeightValue
        WeightLevel: ExerciseWeightLevel
        Status: ExerciseSetState
        Attachments: Attachment list
    }

    // Example: 3 sets: 5 reps of 5RM, 4 reps of 3RM, 1 rep of 1RM
    type ExerciseSetup = {
        Exercise: Exercise
        Sets: ExerciseSet list
        Comment: Comment option
    }

    // The workout to be done on a given day
    type WorkoutSession = {
        Routine: ExerciseSetup list
        DateTime: DateTime
        Comment: Comment option
    }

    type UserWorkoutHistory = WorkoutSession list

    type WorkoutSplit =
        | PushPull
        | Custom of Exercise list list

    type Cycle =
        | Weekly of int // number of day a week
        | RoundRobin of int // number of days in cycle

    type ExercisePolicy =
        | ThreeOfFive
        | FiveThreeOneSingleSetCycle
        | ThreeOfEight
        | Custom of (ExerciseWeightLevel * RepCount) list

    type WorkoutPlan = {
        CycleType: Cycle
        Exercises: (Exercise * ExercisePolicy) list
    }

    type UserAppData = {
        WorkoutPlans: WorkoutPlan list
        ActiveWorkoutPlan: WorkoutPlan
        BodyweightHistory: (DateTime * WeightValue) list
    }
#+end_src
