#+Title: Domain Analysis for My Application

On this document I analyze the domain for my App.

* Module Declaration

#+begin_src fsharp :tangle "Domain.fs"
  module HelloWorldHttpAPI.Domain

  open System
#+end_src

* App Errors

#+begin_src fsharp :tangle "Domain.fs"
  type AuthError =
      | InvalidCredentials
      | NotAuthorized

  type AppError =
      | AuthError of AuthError
      | UserAlreadyExists
      | RoutineAlreadyExists
      | RoutineNotFound
      | UserNotFound

  type AppResponse<'T> = Result<'T, AppError>
#+end_src

* User

Before accessing the app, a user must be logged in.

#+begin_src fsharp :tangle "Domain.fs"

  module AppUser =

      type Email = string
    
      type AppUser = {
          FirstName: string
          LastName: string
          Email: string // Primary Key
          CreatedAt: DateTime
      }
    
      type Session = {
          UserEmail: string
          LoggedAt: DateTime
          TimeToLive: TimeSpan
      }

  module Authentication =

      open AppUser

      type Password = string

      type AuthenticationService = {
          login: Email -> Password -> AppResponse<Session>
          logout: Session -> AppResponse<unit>
      }

  module Authorization =

      open AppUser
    
      type Role =
          | Admin
          | Staff
          | Athlete
    
      type Permission =
          | CanManageWorkoutData
          | CanManageUsers
    
    
      type AuthorizationService = {
          hasPermission: Permission -> Email -> AppResponse<bool>
          grantRole: Role -> Email -> AppResponse<bool>
          removeRole: Role -> Email -> AppResponse<bool>
          grantPermissionToRole: Permission -> Role -> bool -> AppResponse<bool>
      }
#+end_src

* Workout Routine

This is an app for workout routines. A workout is a sequence of
exercises. Each exercise has a name, a number of sets and reps.

#+begin_src fsharp :tangle "Domain.fs"
  module Workout =
      type WorkoutExercise = {
          Name: string
          Reps: int
          Sets: int
      }
    
      type Workout = {
          Routine: WorkoutExercise[]
      }
#+end_src

* Domain Service
#+begin_src fsharp :tangle "Domain.fs"
  module DomainService =
      open Workout
      open AppUser

      type CreateUserRequest = {
            FirstName: string
            LastName: string
            Email: string
      }
    
      type DeleteUserRequest = { Email: string }
    
      type UserService = {
          getUser: string -> Result<AppUser, AppError>
          deleteUser: DeleteUserRequest -> Result<AppUser, AppError>
          listUsers: unit -> Result<AppUser list, AppError>
          createUser: CreateUserRequest -> Result<AppUser, AppError>
      }
      type UserRoutineService = {
          getRoutines: Email -> WorkoutExercise[]
          getTodaysRoutine: Email -> WorkoutExercise
          addRoutine: Email -> WorkoutExercise -> AppResponse<unit>
      }
#+end_src
