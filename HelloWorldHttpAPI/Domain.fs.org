#+Title: Domain Analysis for My Application

This is an app for organizing my workout routine. The end goal is to
have a mobile app that:

- Keeps track of my exercises (# reps, sets, ...)
- Predicts what exercise I will do next based on known policies

* App.Types

#+begin_src fsharp :tangle "Domain.fs"
module App.Types

open System
#+end_src

** Top Level Definitions (App Errors, and Return Type)

Below are listed all possible application errors.

#+begin_src fsharp :tangle "Domain.fs"
type AuthError =
    | InvalidCredentials
    | NotAuthorized

type AppError =
    | AuthError of AuthError
    | UserAlreadyExists
    | RoutineAlreadyExists
    | RoutineNotFound
    | UserNotFound
#+end_src

On this design, all functions that can produce errors are expected to
return the following type.

#+begin_src fsharp :tangle "Domain.fs"
type AppResponse<'T> = Async<Result<'T, AppError>>
#+end_src

With this approach, we can make uniform use for ~asyncresult~ around
the code base. That is: given that all methods produce errors
constrained to ~AppError~, we can uniformly bind results with ~let!~
within and ~asyncresult~ CE.

** Domain

#+begin_src fsharp :tangle "Domain.fs"
module Domain =
#+end_src
*** User

Before accessing the app, a user must be logged in.

On this project I will play with an identify provider such as Active
Directory. The fact that a user has to authenticate is to be
abstracted away, and the app should support multiple mechanisms for
authentication (e.g.: gmail, github, ...).

#+begin_src fsharp :tangle "Domain.fs"
    module AppUser =
        type Email = string
        type PersonName = string
        type ThemePreference =
            | White
            | Dark
        type WeightUnit = | Kilogram | Pound

        type AppUser = {
            Email: Email
            FirstName: PersonName
            LastName: PersonName
            CreatedAt: DateTime
            Birthdate: DateTime
            ThemePreference: ThemePreference
            WeightUnitPreference: WeightUnit
        }
#+end_src

*** Workout Routine

This is an app for workout routines. The key concepts are presented
below.

- Exercise :: A movement pattern which is to be performed gym
  goers. Example: the dead-lift.
- Exercise Set :: A given number of repetitions of an exercise. E.g.:
  10 reps of a dead-lift at 80Kg
- Exercise Setup :: The number of sets and reps to be performed of an
  exercise.
- Workout Session :: A plan of the exercises and sets to be performed
  at a given day at the gym.
- Workout Plan :: A plan that is to be followed by a gym goer, day to
  day.

#+begin_src fsharp :tangle "Domain.fs"
    module Workout =
        open System

        type RepCount = int

        type ExerciseWeightLevel =
            | OneRM
            | ThreeRM
            | FiveRM
            | EightRM

        type WeightValue =
            | Kilogram of double
            | Pounds of double

        type ExerciseName = | ExerciseName of string

        type Exercise = {
            Name: ExerciseName
            Description: string
            VideoTutorial: string option
        }

        type Comment = | Comment of string
        type Video = | Video of string // TODO
        type Picture = | Picture of string // TODO

        type Attachment =
            | Comment of Comment
            | Video of Video
            | Picture of Picture

        type ExerciseSetState =
            | NotTried
            | Completed
            | Failed of Comment option

        type ExerciseSet = {
            Reps: RepCount
            TargetWeight: WeightValue
            WeightLevel: ExerciseWeightLevel
            Status: ExerciseSetState
            Attachments: Attachment list
        }

        // Example: 3 sets: 5 reps of 5RM, 4 reps of 3RM, 1 rep of 1RM
        type ExerciseSetup = {
            Exercise: Exercise
            Sets: ExerciseSet list
            Comment: Comment option
        }

        // The workout to be done on a given day
        type WorkoutSession = {
            Routine: ExerciseSetup list
            DateTime: DateTime
            Comment: Comment option
        }

        type UserWorkoutHistory = WorkoutSession list

        type WorkoutSplit =
            | PushPull
            | Custom of Exercise list list

        type Cycle =
            | Weekly of int // number of day a week
            | RoundRobin of int // number of days in cycle

        type ExercisePolicy =
            | ThreeOfFive
            | FiveThreeOneSingleSetCycle
            | ThreeOfEight
            | Custom of (ExerciseWeightLevel * RepCount) list

        type WorkoutPlan = {
            CycleType: Cycle
            Exercises: (Exercise * ExercisePolicy) list
        }
#+end_src

** Application Data

#+begin_src fsharp :tangle "Domain.fs"
module AppData =
    open Domain.Workout
    open Domain.AppUser

    type UserAppData = {
        WorkoutSessions: WorkoutSession list
        ActiveWorkoutSession: WorkoutSession option
        WorkoutPlans: WorkoutPlan list
        ActiveWorkoutPlan: WorkoutPlan option
        BodyweightHistory: (DateTime * WeightValue) list
        ExerciseDatabase: Exercise list
    }

    type AppData = {
        UserData: Map<Email, (AppUser * UserAppData)>
        SystemData: Map<ExerciseName, Exercise>
    }
#+end_src
